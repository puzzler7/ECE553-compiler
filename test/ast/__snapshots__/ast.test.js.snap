// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The textbook tests parses test/testcases/merge.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
LetExp([
 TypeDec[
  (any,
   RecordTy[
    (any,true,int)])],
 VarDec(buffer,true,NONE,
  CallExp(getchar,[])),
 FunctionDec[
  (readint,[
   (any,true,any)],
SOME(int),
   LetExp([
    VarDec(i,true,NONE,
     IntExp(0)),
    FunctionDec[
     (isdigit,[
      (s,true,string)],
SOME(int),
      IfExp(
       OpExp(GeOp,
        CallExp(ord,[
         VarExp(
          SimpleVar(buffer))]),
        CallExp(ord,[
         StringExp(\\"0\\")])),
       OpExp(LeOp,
        CallExp(ord,[
         VarExp(
          SimpleVar(buffer))]),
        CallExp(ord,[
         StringExp(\\"9\\")])),
       IntExp(0))),
     (skipto,[],
NONE,
      WhileExp(
       IfExp(
        OpExp(EqOp,
         VarExp(
          SimpleVar(buffer)),
         StringExp(\\" \\")),
        IntExp(1),
        OpExp(EqOp,
         VarExp(
          SimpleVar(buffer)),
         StringExp(\\"
\\"))),
       AssignExp(
        SimpleVar(buffer),
        CallExp(getchar,[]))))]],
    SeqExp[
     CallExp(skipto,[]),
     AssignExp(
      FieldVar(
       SimpleVar(any),
       any),
      CallExp(isdigit,[
       VarExp(
        SimpleVar(buffer))])),
     WhileExp(
      CallExp(isdigit,[
       VarExp(
        SimpleVar(buffer))]),
      SeqExp[
       AssignExp(
        SimpleVar(i),
        OpExp(MinusOp,
         OpExp(PlusOp,
          OpExp(TimesOp,
           VarExp(
            SimpleVar(i)),
           IntExp(10)),
          CallExp(ord,[
           VarExp(
            SimpleVar(buffer))])),
         CallExp(ord,[
          StringExp(\\"0\\")]))),
       AssignExp(
        SimpleVar(buffer),
        CallExp(getchar,[]))]),
     VarExp(
      SimpleVar(i))]))],
 TypeDec[
  (list,
   RecordTy[
    (first,true,int),
    (rest,true,list)])],
 FunctionDec[
  (readlist,[],
SOME(list),
   LetExp([
    VarDec(any,true,NONE,
     RecordExp(any,[

      (any,
       IntExp(0))])),
    VarDec(i,true,NONE,
     CallExp(readint,[
      VarExp(
       SimpleVar(any))]))],
    SeqExp[
     IfExp(
      VarExp(
       FieldVar(
        SimpleVar(any),
        any)),
      RecordExp(list,[

       (first,
        VarExp(
         SimpleVar(i))),
       (rest,
        CallExp(readlist,[]))]),
      NilExp)])),
  (merge,[
   (a,true,list),
   (b,true,list)],
SOME(list),
   IfExp(
    OpExp(EqOp,
     VarExp(
      SimpleVar(a)),
     NilExp),
    VarExp(
     SimpleVar(b)),
    IfExp(
     OpExp(EqOp,
      VarExp(
       SimpleVar(b)),
      NilExp),
     VarExp(
      SimpleVar(a)),
     IfExp(
      OpExp(LtOp,
       VarExp(
        FieldVar(
         SimpleVar(a),
         first)),
       VarExp(
        FieldVar(
         SimpleVar(b),
         first))),
      RecordExp(list,[

       (first,
        VarExp(
         FieldVar(
          SimpleVar(a),
          first))),
       (rest,
        CallExp(merge,[
         VarExp(
          FieldVar(
           SimpleVar(a),
           rest)),
         VarExp(
          SimpleVar(b))]))]),
      RecordExp(list,[

       (first,
        VarExp(
         FieldVar(
          SimpleVar(b),
          first))),
       (rest,
        CallExp(merge,[
         VarExp(
          SimpleVar(a)),
         VarExp(
          FieldVar(
           SimpleVar(b),
           rest))]))]))))),
  (printint,[
   (i,true,int)],
NONE,
   LetExp([
    FunctionDec[
     (f,[
      (i,true,int)],
NONE,
      IfExp(
       OpExp(GtOp,
        VarExp(
         SimpleVar(i)),
        IntExp(0)),
       SeqExp[
        CallExp(f,[
         OpExp(DivideOp,
          VarExp(
           SimpleVar(i)),
          IntExp(10))]),
        CallExp(print,[
         CallExp(chr,[
          OpExp(PlusOp,
           OpExp(MinusOp,
            VarExp(
             SimpleVar(i)),
            OpExp(TimesOp,
             OpExp(DivideOp,
              VarExp(
               SimpleVar(i)),
              IntExp(10)),
             IntExp(10))),
           CallExp(ord,[
            StringExp(\\"0\\")]))])])]))]],
    SeqExp[
     IfExp(
      OpExp(LtOp,
       VarExp(
        SimpleVar(i)),
       IntExp(0)),
      SeqExp[
       CallExp(print,[
        StringExp(\\"-\\")]),
       CallExp(f,[
        OpExp(MinusOp,
         IntExp(0),
         VarExp(
          SimpleVar(i)))])],
      IfExp(
       OpExp(GtOp,
        VarExp(
         SimpleVar(i)),
        IntExp(0)),
       CallExp(f,[
        VarExp(
         SimpleVar(i))]),
       CallExp(print,[
        StringExp(\\"0\\")])))])),
  (printlist,[
   (l,true,list)],
NONE,
   IfExp(
    OpExp(EqOp,
     VarExp(
      SimpleVar(l)),
     NilExp),
    CallExp(print,[
     StringExp(\\"
\\")]),
    SeqExp[
     CallExp(printint,[
      VarExp(
       FieldVar(
        SimpleVar(l),
        first))]),
     CallExp(print,[
      StringExp(\\" \\")]),
     CallExp(printlist,[
      VarExp(
       FieldVar(
        SimpleVar(l),
        rest))])]))],
 VarDec(list1,true,NONE,
  CallExp(readlist,[])),
 VarDec(list2,true,NONE,
  SeqExp[
   AssignExp(
    SimpleVar(buffer),
    CallExp(getchar,[])),
   CallExp(readlist,[])])],
 SeqExp[
  CallExp(printlist,[
   CallExp(merge,[
    VarExp(
     SimpleVar(list1)),
    VarExp(
     SimpleVar(list2))])])])
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/queens.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
LetExp([
 VarDec(N,true,NONE,
  IntExp(8)),
 TypeDec[
  (intArray,
   ArrayTy(int))],
 VarDec(row,true,NONE,
  ArrayExp(intArray,
   VarExp(
    SimpleVar(N)),
   IntExp(0))),
 VarDec(col,true,NONE,
  ArrayExp(intArray,
   VarExp(
    SimpleVar(N)),
   IntExp(0))),
 VarDec(diag1,true,NONE,
  ArrayExp(intArray,
   OpExp(MinusOp,
    OpExp(PlusOp,
     VarExp(
      SimpleVar(N)),
     VarExp(
      SimpleVar(N))),
    IntExp(1)),
   IntExp(0))),
 VarDec(diag2,true,NONE,
  ArrayExp(intArray,
   OpExp(MinusOp,
    OpExp(PlusOp,
     VarExp(
      SimpleVar(N)),
     VarExp(
      SimpleVar(N))),
    IntExp(1)),
   IntExp(0))),
 FunctionDec[
  (printboard,[],
NONE,
   SeqExp[
    ForExp(
i,true,
     IntExp(0),
     OpExp(MinusOp,
      VarExp(
       SimpleVar(N)),
      IntExp(1)),
     SeqExp[
      ForExp(
j,true,
       IntExp(0),
       OpExp(MinusOp,
        VarExp(
         SimpleVar(N)),
        IntExp(1)),
       CallExp(print,[
        IfExp(
         OpExp(EqOp,
          VarExp(
           SubscriptVar(
            SimpleVar(col),
            VarExp(
             SimpleVar(i)))),
          VarExp(
           SimpleVar(j))),
         StringExp(\\" O\\"),
         StringExp(\\" .\\"))])),
      CallExp(print,[
       StringExp(\\"
\\")])]),
    CallExp(print,[
     StringExp(\\"
\\")])]),
  (try,[
   (c,true,int)],
NONE,
   SeqExp[
    IfExp(
     OpExp(EqOp,
      VarExp(
       SimpleVar(c)),
      VarExp(
       SimpleVar(N))),
     CallExp(printboard,[]),
     ForExp(
r,true,
      IntExp(0),
      OpExp(MinusOp,
       VarExp(
        SimpleVar(N)),
       IntExp(1)),
      IfExp(
       IfExp(
        IfExp(
         OpExp(EqOp,
          VarExp(
           SubscriptVar(
            SimpleVar(row),
            VarExp(
             SimpleVar(r)))),
          IntExp(0)),
         OpExp(EqOp,
          VarExp(
           SubscriptVar(
            SimpleVar(diag1),
            OpExp(PlusOp,
             VarExp(
              SimpleVar(r)),
             VarExp(
              SimpleVar(c))))),
          IntExp(0)),
         IntExp(0)),
        OpExp(EqOp,
         VarExp(
          SubscriptVar(
           SimpleVar(diag2),
           OpExp(MinusOp,
            OpExp(PlusOp,
             VarExp(
              SimpleVar(r)),
             IntExp(7)),
            VarExp(
             SimpleVar(c))))),
         IntExp(0)),
        IntExp(0)),
       SeqExp[
        AssignExp(
         SubscriptVar(
          SimpleVar(row),
          VarExp(
           SimpleVar(r))),
         IntExp(1)),
        AssignExp(
         SubscriptVar(
          SimpleVar(diag1),
          OpExp(PlusOp,
           VarExp(
            SimpleVar(r)),
           VarExp(
            SimpleVar(c)))),
         IntExp(1)),
        AssignExp(
         SubscriptVar(
          SimpleVar(diag2),
          OpExp(MinusOp,
           OpExp(PlusOp,
            VarExp(
             SimpleVar(r)),
            IntExp(7)),
           VarExp(
            SimpleVar(c)))),
         IntExp(1)),
        AssignExp(
         SubscriptVar(
          SimpleVar(col),
          VarExp(
           SimpleVar(c))),
         VarExp(
          SimpleVar(r))),
        CallExp(try,[
         OpExp(PlusOp,
          VarExp(
           SimpleVar(c)),
          IntExp(1))]),
        AssignExp(
         SubscriptVar(
          SimpleVar(row),
          VarExp(
           SimpleVar(r))),
         IntExp(0)),
        AssignExp(
         SubscriptVar(
          SimpleVar(diag1),
          OpExp(PlusOp,
           VarExp(
            SimpleVar(r)),
           VarExp(
            SimpleVar(c)))),
         IntExp(0)),
        AssignExp(
         SubscriptVar(
          SimpleVar(diag2),
          OpExp(MinusOp,
           OpExp(PlusOp,
            VarExp(
             SimpleVar(r)),
            IntExp(7)),
           VarExp(
            SimpleVar(c)))),
         IntExp(0))])))])]],
 SeqExp[
  CallExp(try,[
   IntExp(0)])])
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test1.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
LetExp([
 TypeDec[
  (arrtype,
   ArrayTy(int))],
 VarDec(arr1,true,SOME(arrtype),
  ArrayExp(arrtype,
   IntExp(10),
   IntExp(0)))],
 SeqExp[
  VarExp(
   SimpleVar(arr1))])
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test2.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
LetExp([
 TypeDec[
  (myint,
   NameTy(int)),
  (arrtype,
   ArrayTy(myint))],
 VarDec(arr1,true,SOME(arrtype),
  ArrayExp(arrtype,
   IntExp(10),
   IntExp(0)))],
 SeqExp[
  VarExp(
   SimpleVar(arr1))])
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test3.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
LetExp([
 TypeDec[
  (rectype,
   RecordTy[
    (name,true,string),
    (age,true,int)])],
 VarDec(rec1,true,SOME(rectype),
  RecordExp(rectype,[

   (name,
    StringExp(\\"Nobody\\")),
   (age,
    IntExp(1000))]))],
 SeqExp[
  AssignExp(
   FieldVar(
    SimpleVar(rec1),
    name),
   StringExp(\\"Somebody\\")),
  VarExp(
   SimpleVar(rec1))])
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test4.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
LetExp([
 FunctionDec[
  (nfactor,[
   (n,true,int)],
SOME(int),
   IfExp(
    OpExp(EqOp,
     VarExp(
      SimpleVar(n)),
     IntExp(0)),
    IntExp(1),
    OpExp(TimesOp,
     VarExp(
      SimpleVar(n)),
     CallExp(nfactor,[
      OpExp(MinusOp,
       VarExp(
        SimpleVar(n)),
       IntExp(1))]))))]],
 SeqExp[
  CallExp(nfactor,[
   IntExp(10)])])
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test5.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
LetExp([
 TypeDec[
  (intlist,
   RecordTy[
    (hd,true,int),
    (tl,true,intlist)]),
  (tree,
   RecordTy[
    (key,true,int),
    (children,true,treelist)]),
  (treelist,
   RecordTy[
    (hd,true,tree),
    (tl,true,treelist)])],
 VarDec(lis,true,SOME(intlist),
  RecordExp(intlist,[

   (hd,
    IntExp(0)),
   (tl,
    NilExp)]))],
 SeqExp[
  VarExp(
   SimpleVar(lis))])
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test6.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
LetExp([
 FunctionDec[
  (do_nothing1,[
   (a,true,int),
   (b,true,string)],
NONE,
   CallExp(do_nothing2,[
    OpExp(PlusOp,
     VarExp(
      SimpleVar(a)),
     IntExp(1))])),
  (do_nothing2,[
   (d,true,int)],
NONE,
   CallExp(do_nothing1,[
    VarExp(
     SimpleVar(d)),
    StringExp(\\"str\\")]))]],
 SeqExp[
  CallExp(do_nothing1,[
   IntExp(0),
   StringExp(\\"str2\\")])])
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test7.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
LetExp([
 FunctionDec[
  (do_nothing1,[
   (a,true,int),
   (b,true,string)],
SOME(int),
   SeqExp[
    CallExp(do_nothing2,[
     OpExp(PlusOp,
      VarExp(
       SimpleVar(a)),
      IntExp(1))]),
    IntExp(0)]),
  (do_nothing2,[
   (d,true,int)],
SOME(string),
   SeqExp[
    CallExp(do_nothing1,[
     VarExp(
      SimpleVar(d)),
     StringExp(\\"str\\")]),
    StringExp(\\" \\")])]],
 SeqExp[
  CallExp(do_nothing1,[
   IntExp(0),
   StringExp(\\"str2\\")])])
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test8.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
IfExp(
 SeqExp[
  OpExp(GtOp,
   IntExp(10),
   IntExp(20))],
 IntExp(30),
 IntExp(40))
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test9.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
IfExp(
 SeqExp[
  OpExp(GtOp,
   IntExp(5),
   IntExp(4))],
 IntExp(13),
 StringExp(\\" \\"))
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test10.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
WhileExp(
 SeqExp[
  OpExp(GtOp,
   IntExp(10),
   IntExp(5))],
 OpExp(PlusOp,
  IntExp(5),
  IntExp(6)))
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test11.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
ForExp(
i,true,
 IntExp(10),
 StringExp(\\" \\"),
 AssignExp(
  SimpleVar(i),
  OpExp(MinusOp,
   VarExp(
    SimpleVar(i)),
   IntExp(1))))
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test12.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
LetExp([
 VarDec(a,true,NONE,
  IntExp(0))],
 SeqExp[
  ForExp(
i,true,
   IntExp(0),
   IntExp(100),
   SeqExp[
    AssignExp(
     SimpleVar(a),
     OpExp(PlusOp,
      VarExp(
       SimpleVar(a)),
      IntExp(1))),
    NilExp])])
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test13.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
OpExp(GtOp,
 IntExp(3),
 StringExp(\\"df\\"))
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test14.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
LetExp([
 TypeDec[
  (arrtype,
   ArrayTy(int)),
  (rectype,
   RecordTy[
    (name,true,string),
    (id,true,int)])],
 VarDec(rec,true,NONE,
  RecordExp(rectype,[

   (name,
    StringExp(\\"aname\\")),
   (id,
    IntExp(0))])),
 VarDec(arr,true,NONE,
  ArrayExp(arrtype,
   IntExp(3),
   IntExp(0)))],
 SeqExp[
  IfExp(
   OpExp(NeqOp,
    VarExp(
     SimpleVar(rec)),
    VarExp(
     SimpleVar(arr))),
   IntExp(3),
   IntExp(4))])
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test15.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
IfExp(
 IntExp(20),
 IntExp(3))
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test16.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
LetExp([
 TypeDec[
  (a,
   NameTy(c)),
  (b,
   NameTy(a)),
  (c,
   NameTy(d)),
  (d,
   NameTy(a))]],
 SeqExp[
  StringExp(\\"\\")])
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test17.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
LetExp([
 TypeDec[
  (tree,
   RecordTy[
    (key,true,int),
    (children,true,treelist)])],
 VarDec(d,true,SOME(int),
  IntExp(0)),
 TypeDec[
  (treelist,
   RecordTy[
    (hd,true,tree),
    (tl,true,treelist)])]],
 SeqExp[
  VarExp(
   SimpleVar(d))])
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test18.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
LetExp([
 FunctionDec[
  (do_nothing1,[
   (a,true,int),
   (b,true,string)],
SOME(int),
   SeqExp[
    CallExp(do_nothing2,[
     OpExp(PlusOp,
      VarExp(
       SimpleVar(a)),
      IntExp(1))]),
    IntExp(0)])],
 VarDec(d,true,NONE,
  IntExp(0)),
 FunctionDec[
  (do_nothing2,[
   (d,true,int)],
SOME(string),
   SeqExp[
    CallExp(do_nothing1,[
     VarExp(
      SimpleVar(d)),
     StringExp(\\"str\\")]),
    StringExp(\\" \\")])]],
 SeqExp[
  CallExp(do_nothing1,[
   IntExp(0),
   StringExp(\\"str2\\")])])
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test19.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
LetExp([
 FunctionDec[
  (do_nothing1,[
   (a,true,int),
   (b,true,string)],
SOME(int),
   SeqExp[
    CallExp(do_nothing2,[
     OpExp(PlusOp,
      VarExp(
       SimpleVar(a)),
      IntExp(1))]),
    IntExp(0)]),
  (do_nothing2,[
   (d,true,int)],
SOME(string),
   SeqExp[
    CallExp(do_nothing1,[
     VarExp(
      SimpleVar(a)),
     StringExp(\\"str\\")]),
    StringExp(\\" \\")])]],
 SeqExp[
  CallExp(do_nothing1,[
   IntExp(0),
   StringExp(\\"str2\\")])])
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test20.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
WhileExp(
 OpExp(GtOp,
  IntExp(10),
  IntExp(5)),
 SeqExp[
  OpExp(PlusOp,
   VarExp(
    SimpleVar(i)),
   IntExp(1)),
  NilExp])
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test21.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
LetExp([
 FunctionDec[
  (nfactor,[
   (n,true,int)],
NONE,
   IfExp(
    OpExp(EqOp,
     VarExp(
      SimpleVar(n)),
     IntExp(0)),
    IntExp(1),
    OpExp(TimesOp,
     VarExp(
      SimpleVar(n)),
     CallExp(nfactor,[
      OpExp(MinusOp,
       VarExp(
        SimpleVar(n)),
       IntExp(1))]))))]],
 SeqExp[
  CallExp(nfactor,[
   IntExp(10)])])
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test22.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
LetExp([
 TypeDec[
  (rectype,
   RecordTy[
    (name,true,string),
    (id,true,int)])],
 VarDec(rec1,true,NONE,
  RecordExp(rectype,[

   (name,
    StringExp(\\"Name\\")),
   (id,
    IntExp(0))]))],
 SeqExp[
  AssignExp(
   FieldVar(
    SimpleVar(rec1),
    nam),
   StringExp(\\"asd\\"))])
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test23.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
LetExp([
 TypeDec[
  (rectype,
   RecordTy[
    (name,true,string),
    (id,true,int)])],
 VarDec(rec1,true,NONE,
  RecordExp(rectype,[

   (name,
    StringExp(\\"aname\\")),
   (id,
    IntExp(0))]))],
 SeqExp[
  AssignExp(
   FieldVar(
    SimpleVar(rec1),
    name),
   IntExp(3)),
  AssignExp(
   FieldVar(
    SimpleVar(rec1),
    id),
   StringExp(\\"\\"))])
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test24.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
LetExp([
 VarDec(d,true,NONE,
  IntExp(0))],
 SeqExp[
  VarExp(
   SubscriptVar(
    SimpleVar(d),
    IntExp(3)))])
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test25.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
LetExp([
 VarDec(d,true,NONE,
  IntExp(0))],
 SeqExp[
  VarExp(
   FieldVar(
    SimpleVar(d),
    f))])
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test26.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
OpExp(PlusOp,
 IntExp(3),
 StringExp(\\"var\\"))
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test27.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
LetExp([
 VarDec(a,true,NONE,
  IntExp(0)),
 FunctionDec[
  (g,[
   (a,true,int)],
SOME(int),
   VarExp(
    SimpleVar(a)))]],
 SeqExp[
  CallExp(g,[
   IntExp(2)])])
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test28.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
LetExp([
 TypeDec[
  (rectype1,
   RecordTy[
    (name,true,string),
    (id,true,int)]),
  (rectype2,
   RecordTy[
    (name,true,string),
    (id,true,int)])],
 VarDec(rec1,true,SOME(rectype1),
  RecordExp(rectype2,[

   (name,
    StringExp(\\"Name\\")),
   (id,
    IntExp(0))]))],
 SeqExp[
  VarExp(
   SimpleVar(rec1))])
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test29.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
LetExp([
 TypeDec[
  (arrtype1,
   ArrayTy(int)),
  (arrtype2,
   ArrayTy(int))],
 VarDec(arr1,true,SOME(arrtype1),
  ArrayExp(arrtype2,
   IntExp(10),
   IntExp(0)))],
 SeqExp[
  VarExp(
   SimpleVar(arr1))])
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test30.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
LetExp([
 TypeDec[
  (a,
   ArrayTy(int)),
  (b,
   NameTy(a))],
 VarDec(arr1,true,SOME(a),
  ArrayExp(b,
   IntExp(10),
   IntExp(0)))],
 SeqExp[
  VarExp(
   SubscriptVar(
    SimpleVar(arr1),
    IntExp(2)))])
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test31.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
LetExp([
 VarDec(a,true,SOME(int),
  StringExp(\\" \\"))],
 SeqExp[
  VarExp(
   SimpleVar(a))])
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test32.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
LetExp([
 TypeDec[
  (arrayty,
   ArrayTy(int))],
 VarDec(a,true,NONE,
  ArrayExp(arrayty,
   IntExp(10),
   StringExp(\\" \\")))],
 SeqExp[
  IntExp(0)])
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test33.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
LetExp([
 VarDec(a,true,NONE,
  RecordExp(rectype,[
]))],
 SeqExp[
  IntExp(0)])
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test34.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
LetExp([
 FunctionDec[
  (g,[
   (a,true,int),
   (b,true,string)],
SOME(int),
   VarExp(
    SimpleVar(a)))]],
 SeqExp[
  CallExp(g,[
   StringExp(\\"one\\"),
   StringExp(\\"two\\")])])
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test35.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
LetExp([
 FunctionDec[
  (g,[
   (a,true,int),
   (b,true,string)],
SOME(int),
   VarExp(
    SimpleVar(a)))]],
 SeqExp[
  CallExp(g,[
   StringExp(\\"one\\")])])
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test36.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
LetExp([
 FunctionDec[
  (g,[
   (a,true,int),
   (b,true,string)],
SOME(int),
   VarExp(
    SimpleVar(a)))]],
 SeqExp[
  CallExp(g,[
   IntExp(3),
   StringExp(\\"one\\"),
   IntExp(5)])])
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test37.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
LetExp([
 VarDec(a,true,NONE,
  IntExp(0)),
 VarDec(a,true,NONE,
  StringExp(\\" \\"))],
 SeqExp[
  IntExp(0)])
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test38.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
LetExp([
 TypeDec[
  (a,
   NameTy(int)),
  (a,
   NameTy(string))]],
 SeqExp[
  IntExp(0)])
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test39.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
LetExp([
 FunctionDec[
  (g,[
   (a,true,int)],
SOME(int),
   VarExp(
    SimpleVar(a))),
  (g,[
   (a,true,int)],
SOME(int),
   VarExp(
    SimpleVar(a)))]],
 SeqExp[
  IntExp(0)])
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test40.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
LetExp([
 FunctionDec[
  (g,[
   (a,true,int)],
NONE,
   VarExp(
    SimpleVar(a)))]],
 SeqExp[
  CallExp(g,[
   IntExp(2)])])
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test41.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
LetExp([
 TypeDec[
  (a,
   NameTy(int))]],
 SeqExp[
  LetExp([
   TypeDec[
    (a,
     NameTy(string))]],
   SeqExp[
    IntExp(0)])])
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test42.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
LetExp([
 TypeDec[
  (arrtype1,
   ArrayTy(int)),
  (rectype1,
   RecordTy[
    (name,true,string),
    (address,true,string),
    (id,true,int),
    (age,true,int)]),
  (arrtype2,
   ArrayTy(rectype1)),
  (rectype2,
   RecordTy[
    (name,true,string),
    (dates,true,arrtype1)]),
  (arrtype3,
   ArrayTy(string))],
 VarDec(arr1,true,NONE,
  ArrayExp(arrtype1,
   IntExp(10),
   IntExp(0))),
 VarDec(arr2,true,NONE,
  ArrayExp(arrtype2,
   IntExp(5),
   RecordExp(rectype1,[

    (name,
     StringExp(\\"aname\\")),
    (address,
     StringExp(\\"somewhere\\")),
    (id,
     IntExp(0)),
    (age,
     IntExp(0))]))),
 VarDec(arr3,true,SOME(arrtype3),
  ArrayExp(arrtype3,
   IntExp(100),
   StringExp(\\"\\"))),
 VarDec(rec1,true,NONE,
  RecordExp(rectype1,[

   (name,
    StringExp(\\"Kapoios\\")),
   (address,
    StringExp(\\"Kapou\\")),
   (id,
    IntExp(2432)),
   (age,
    IntExp(44))])),
 VarDec(rec2,true,NONE,
  RecordExp(rectype2,[

   (name,
    StringExp(\\"Allos\\")),
   (dates,
    ArrayExp(arrtype1,
     IntExp(3),
     IntExp(1900)))]))],
 SeqExp[
  AssignExp(
   SubscriptVar(
    SimpleVar(arr1),
    IntExp(0)),
   IntExp(1)),
  AssignExp(
   SubscriptVar(
    SimpleVar(arr1),
    IntExp(9)),
   IntExp(3)),
  AssignExp(
   FieldVar(
    SubscriptVar(
     SimpleVar(arr2),
     IntExp(3)),
    name),
   StringExp(\\"kati\\")),
  AssignExp(
   FieldVar(
    SubscriptVar(
     SimpleVar(arr2),
     IntExp(1)),
    age),
   IntExp(23)),
  AssignExp(
   SubscriptVar(
    SimpleVar(arr3),
    IntExp(34)),
   StringExp(\\"sfd\\")),
  AssignExp(
   FieldVar(
    SimpleVar(rec1),
    name),
   StringExp(\\"sdf\\")),
  AssignExp(
   FieldVar(
    SimpleVar(rec2),
    dates),
   IntExp(2323)),
  AssignExp(
   FieldVar(
    SimpleVar(rec2),
    dates),
   IntExp(2323))])
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test43.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
LetExp([
 VarDec(a,true,NONE,
  NilExp)],
 SeqExp[
  OpExp(PlusOp,
   VarExp(
    SimpleVar(a)),
   IntExp(3))])
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test44.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
LetExp([
 TypeDec[
  (rectype,
   RecordTy[
    (name,true,string),
    (id,true,int)])],
 VarDec(b,true,SOME(rectype),
  NilExp)],
 SeqExp[
  AssignExp(
   SimpleVar(b),
   NilExp)])
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test45.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
LetExp([
 TypeDec[
  (rectype,
   RecordTy[
    (name,true,string),
    (id,true,int)])],
 VarDec(a,true,NONE,
  NilExp)],
 SeqExp[
  VarExp(
   SimpleVar(a))])
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test46.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
LetExp([
 TypeDec[
  (rectype,
   RecordTy[
    (name,true,string),
    (id,true,int)])],
 VarDec(b,true,SOME(rectype),
  NilExp)],
 SeqExp[
  OpExp(EqOp,
   VarExp(
    SimpleVar(b)),
   NilExp),
  OpExp(NeqOp,
   VarExp(
    SimpleVar(b)),
   NilExp)])
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test47.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
LetExp([
 TypeDec[
  (a,
   NameTy(int))],
 VarDec(b,true,NONE,
  IntExp(4)),
 TypeDec[
  (a,
   NameTy(string))]],
 SeqExp[
  IntExp(0)])
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test48.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
LetExp([
 FunctionDec[
  (g,[
   (a,true,int)],
SOME(int),
   VarExp(
    SimpleVar(a)))],
 TypeDec[
  (t,
   NameTy(int))],
 FunctionDec[
  (g,[
   (a,true,int)],
SOME(int),
   VarExp(
    SimpleVar(a)))]],
 SeqExp[
  IntExp(0)])
val it = () : unit

"
`;

exports[`The textbook tests parses test/testcases/test49.tig correctly 1`] = `
"
val it = true : bool
[opening src/parser/prabsyn.sml]
[autoloading]
[autoloading done]
structure PrintAbsyn : sig
  val print : TextIO.outstream * Absyn.exp -> unit
end
val it = () : unit
test/testcases/test49.tig:5.18:syntax error: inserting  PLUS
LetExp([
 TypeDec[
  (rectype,
   RecordTy[
    (name,true,string),
    (id,true,int)])],
 VarDec(a,true,NONE,
  OpExp(PlusOp,
   VarExp(
    SimpleVar(rectype)),
   NilExp))],
 SeqExp[
  VarExp(
   SimpleVar(a))])
val it = () : unit

"
`;
