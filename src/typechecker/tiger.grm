structure A = Absyn

%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE | UMINUS

%nonterm  exp of A.exp| program of A.exp | exps of (A.exp * A.pos) list | decs of A.dec list
        | dec of A.dec | tydec of {id:Symbol.symbol, ty:A.ty} | ty of A.ty | typeid of Symbol.symbol 
        | tyfields of {name: Symbol.symbol, escape: bool ref, typ: Symbol.symbol, pos: A.pos} list
        | vardec of A.dec | fundec of A.fundec | lvalue of A.var 
        | hackybrackthing of {id: Symbol.symbol, exp: A.exp}
        | typeorlid of Symbol.symbol | recfields of (Symbol.symbol * A.exp * A.pos) list | args of A.exp list

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%nonassoc ASSIGN
%left OR
%left AND
%nonassoc LT LE GE GT EQ NEQ
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%%

program	: exp		(exp)

	
exp : NIL                               (A.NilExp)
    | INT                               (A.IntExp(INT))
    | STRING                            (A.StringExp(STRING, STRING1left))
    | lvalue                            (A.VarExp(lvalue))
    | exp PLUS exp                      (A.OpExp({left=exp1, oper=A.PlusOp, pos=PLUSleft, right=exp2}))
    | exp MINUS exp                     (A.OpExp({left=exp1, oper=A.MinusOp, pos=MINUSleft, right=exp2}))
    | exp TIMES exp                     (A.OpExp({left=exp1, oper=A.TimesOp, pos=TIMESleft, right=exp2}))
    | exp DIVIDE exp                    (A.OpExp({left=exp1, oper=A.DivideOp, pos=DIVIDEleft, right=exp2}))
    | exp LT exp                        (A.OpExp({left=exp1, oper=A.LtOp, pos=LTleft, right=exp2}))
    | exp NEQ exp                       (A.OpExp({left=exp1, oper=A.NeqOp, pos=NEQleft, right=exp2})) (*10*)
    | exp LE exp                        (A.OpExp({left=exp1, oper=A.LeOp, pos=LEleft, right=exp2}))
    | exp GT exp                        (A.OpExp({left=exp1, oper=A.GtOp, pos=GTleft, right=exp2}))
    | exp GE exp                        (A.OpExp({left=exp1, oper=A.GeOp, pos=GEleft, right=exp2}))
    | exp EQ exp                        (A.OpExp({left=exp1, oper=A.EqOp, pos=EQleft, right=exp2}))
    | exp AND exp                       (A.IfExp({test=exp1, then'=exp2, else'=SOME(A.IntExp(0)), pos=AND1left}))
    | exp OR exp                        (A.IfExp({test=exp1, then'=A.IntExp(1), else'=SOME(exp2), pos=OR1left}))
    | IF exp THEN exp ELSE exp          (A.IfExp({test=exp1, then'=exp2, else'=SOME(exp3), pos=IF1left}))
    | IF exp THEN exp                   (A.IfExp({test=exp1, then'=exp2, else'=NONE, pos=IF1left}))
    | WHILE exp DO exp                  (A.WhileExp({test=exp1, body=exp2, pos=WHILE1left})) (*20*)
    | FOR ID ASSIGN exp TO exp DO exp   (A.ForExp({var=Symbol.symbol ID, escape=ref true, lo=exp1, hi=exp2, body=exp3, pos=FORleft})) 
    | LET decs IN exps END              (A.LetExp({decs=decs, body=A.SeqExp(exps), pos=LETleft})) (*FIXME!!!*)
    | lvalue ASSIGN exp                 (A.AssignExp({var=lvalue, exp=exp, pos=ASSIGNleft}))
    | LPAREN RPAREN                     (A.NilExp) (*FIXME!!! maybe?*)
    | LPAREN exps RPAREN                (A.SeqExp(exps))
    | ID LPAREN args RPAREN             (A.CallExp({func=Symbol.symbol ID, args=args, pos=IDleft}))
    | hackybrackthing OF exp            (A.ArrayExp({typ=(#id hackybrackthing), size=(#exp hackybrackthing), init=exp, pos=hackybrackthingleft}))
    | typeid LBRACE recfields RBRACE    (A.RecordExp({fields=recfields, typ=typeid, pos=typeidleft}))
    | BREAK                             (A.BreakExp(BREAKleft))
    | MINUS exp %prec UMINUS            (A.OpExp({left=A.IntExp(0), oper=A.MinusOp, pos=MINUSleft, right=exp})) 

recfields : ID EQ exp                 ([(Symbol.symbol ID, exp, IDleft)])
          | ID EQ exp COMMA recfields ([(Symbol.symbol ID, exp, IDleft)] @ recfields)
          |                           ([])

args : exp              ([exp])
     | exp COMMA args   ([exp] @ args)
     |                  ([])

typeorlid: ID (Symbol.symbol ID)

hackybrackthing: typeorlid LBRACK exp RBRACK ({id=typeorlid, exp=exp})

lvalue : typeorlid                  (A.SimpleVar(typeorlid, typeorlidleft))
       | lvalue DOT ID              (A.FieldVar(lvalue, Symbol.symbol ID, lvalueleft))
       | hackybrackthing            (A.SubscriptVar(A.SimpleVar(#id hackybrackthing, hackybrackthingleft), #exp hackybrackthing, hackybrackthingleft))
       | lvalue DOT hackybrackthing (A.FieldVar(lvalue, #id hackybrackthing, lvalueleft)) (*FIXME!!!*)

exps : exp                  ([(exp, exp1left)])
     | exp SEMICOLON exps   ([(exp, exp1left)] @ exps)

(*dec :: decs*)

decs : dec decs (let
                  fun concat (newdec, []) = [newdec]
                    | concat (newdec, dechead::declist) = case (newdec, dechead, declist) of
                      (A.FunctionDec(ndecflist), A.FunctionDec(hdecflist), declist) => A.FunctionDec(ndecflist @ hdecflist) :: declist
                    | (A.TypeDec(ndectlist), A.TypeDec(hdectlist), declist) => A.TypeDec(ndectlist @ hdectlist) :: declist
                    | (newdec, dechead, declist) => newdec :: (dechead::declist)
                in
                  concat (dec, decs)
                end) 
     |          ([])

dec : tydec     (A.TypeDec([{name=(#id tydec), ty=(#ty tydec), pos=tydecleft}]))
    | vardec    (vardec)
    | fundec    (A.FunctionDec([fundec]))

tydec : TYPE typeid EQ ty ({id=typeid, ty=ty})

ty : typeid                     (A.NameTy(typeid, typeidleft))
    | LBRACE tyfields RBRACE    (A.RecordTy(tyfields))
    | ARRAY OF typeid           (A.ArrayTy(typeid, typeidleft))

typeid : typeorlid (typeorlid)

tyfields : ID COLON typeid                  ([{name=Symbol.symbol ID, escape=ref true, typ=typeid, pos=IDleft}])
         | ID COLON typeid COMMA tyfields   ([{name=Symbol.symbol ID, escape=ref true, typ=typeid, pos=IDleft}] @ tyfields)
         |                                  ([])

vardec : VAR ID ASSIGN exp              (A.VarDec({name=Symbol.symbol ID, escape=ref true, typ=NONE, init=exp, pos=ASSIGNleft}))
       | VAR ID COLON typeid ASSIGN exp (A.VarDec({name=Symbol.symbol ID, escape=ref true, typ=SOME(typeid, typeidleft), init=exp, pos=ASSIGNleft}))

fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp              ({name=Symbol.symbol ID, params=tyfields, result=NONE, body=exp, pos=FUNCTIONleft})
       | FUNCTION ID LPAREN tyfields RPAREN COLON typeid EQ exp ({name=Symbol.symbol ID, params=tyfields, result=SOME(typeid, typeidleft), body=exp, pos=FUNCTIONleft})




