structure Mlex  = struct

    structure yyInput : sig

        type stream
	val mkStream : (int -> string) -> stream
	val fromStream : TextIO.StreamIO.instream -> stream
	val getc : stream -> (Char.char * stream) option
	val getpos : stream -> int
	val getlineNo : stream -> int
	val subtract : stream * stream -> string
	val eof : stream -> bool
	val lastWasNL : stream -> bool

      end = struct

        structure TIO = TextIO
        structure TSIO = TIO.StreamIO
	structure TPIO = TextPrimIO

        datatype stream = Stream of {
            strm : TSIO.instream,
	    id : int,  (* track which streams originated 
			* from the same stream *)
	    pos : int,
	    lineNo : int,
	    lastWasNL : bool
          }

	local
	  val next = ref 0
	in
	fun nextId() = !next before (next := !next + 1)
	end

	val initPos = 2 (* ml-lex bug compatibility *)

	fun mkStream inputN = let
              val strm = TSIO.mkInstream 
			   (TPIO.RD {
			        name = "lexgen",
				chunkSize = 4096,
				readVec = SOME inputN,
				readArr = NONE,
				readVecNB = NONE,
				readArrNB = NONE,
				block = NONE,
				canInput = NONE,
				avail = (fn () => NONE),
				getPos = NONE,
				setPos = NONE,
				endPos = NONE,
				verifyPos = NONE,
				close = (fn () => ()),
				ioDesc = NONE
			      }, "")
	      in 
		Stream {strm = strm, id = nextId(), pos = initPos, lineNo = 1,
			lastWasNL = true}
	      end

	fun fromStream strm = Stream {
		strm = strm, id = nextId(), pos = initPos, lineNo = 1, lastWasNL = true
	      }

	fun getc (Stream {strm, pos, id, lineNo, ...}) = (case TSIO.input1 strm
              of NONE => NONE
	       | SOME (c, strm') => 
		   SOME (c, Stream {
			        strm = strm', 
				pos = pos+1, 
				id = id,
				lineNo = lineNo + 
					 (if c = #"\n" then 1 else 0),
				lastWasNL = (c = #"\n")
			      })
	     (* end case*))

	fun getpos (Stream {pos, ...}) = pos

	fun getlineNo (Stream {lineNo, ...}) = lineNo

	fun subtract (new, old) = let
	      val Stream {strm = strm, pos = oldPos, id = oldId, ...} = old
	      val Stream {pos = newPos, id = newId, ...} = new
              val (diff, _) = if newId = oldId andalso newPos >= oldPos
			      then TSIO.inputN (strm, newPos - oldPos)
			      else raise Fail 
				"BUG: yyInput: attempted to subtract incompatible streams"
	      in 
		diff 
	      end

	fun eof s = not (isSome (getc s))

	fun lastWasNL (Stream {lastWasNL, ...}) = lastWasNL

      end

    datatype yystart_state = 
STRING | COMMENT | INITIAL
    structure UserDeclarations = 
      struct

type pos = int
type lexresult = Tokens.token

val lineNum = ErrorMsg.lineNum
val linePos = ErrorMsg.linePos
fun err(p1,p2) = ErrorMsg.error p1

val nestingDepth = ref 0
val str = ref ""
val inStr = ref 0
val strStart = ref 0
fun eof() = let val pos = hd(!linePos) in Tokens.EOF(pos,pos) end
fun asciiToString(x) = if x < 128 then SOME (Char.toString(Char.chr(x))) else NONE


      end

    datatype yymatch 
      = yyNO_MATCH
      | yyMATCH of yyInput.stream * action * yymatch
    withtype action = yyInput.stream * yymatch -> UserDeclarations.lexresult

    local

    val yytable = 
#[([(#"\^@",#"\t",3),
(#"\v",#"!",3),
(#"#",#"[",3),
(#"]",#"s",3),
(#"u",#"\255",3),
(#"\"",#"\"",4),
(#"\\",#"\\",5),
(#"t",#"t",6)], []), ([(#"\^@",#"\t",59),
(#"\v",#")",59),
(#"+",#".",59),
(#"0",#"s",59),
(#"u",#"\255",59),
(#"\n",#"\n",60),
(#"*",#"*",61),
(#"/",#"/",62),
(#"t",#"t",63)], []), ([(#"\^@",#"\b",67),
(#"\v",#"\f",67),
(#"\^N",#"\^_",67),
(#"!",#"!",67),
(#"#",#"%",67),
(#"'",#"'",67),
(#"?",#"@",67),
(#"\\",#"\\",67),
(#"^",#"`",67),
(#"~",#"\255",67),
(#"\t",#"\t",68),
(#"\r",#"\r",68),
(#" ",#" ",68),
(#"\n",#"\n",69),
(#"\"",#"\"",70),
(#"&",#"&",71),
(#"(",#"(",72),
(#")",#")",73),
(#"*",#"*",74),
(#"+",#"+",75),
(#",",#",",76),
(#"-",#"-",77),
(#".",#".",78),
(#"/",#"/",79),
(#"0",#"9",80),
(#":",#":",81),
(#";",#";",82),
(#"<",#"<",83),
(#"=",#"=",84),
(#">",#">",85),
(#"A",#"Z",86),
(#"c",#"c",86),
(#"g",#"h",86),
(#"j",#"k",86),
(#"m",#"m",86),
(#"p",#"s",86),
(#"u",#"u",86),
(#"x",#"z",86),
(#"[",#"[",87),
(#"]",#"]",88),
(#"a",#"a",89),
(#"b",#"b",90),
(#"d",#"d",91),
(#"e",#"e",92),
(#"f",#"f",93),
(#"i",#"i",94),
(#"l",#"l",95),
(#"n",#"n",96),
(#"o",#"o",97),
(#"t",#"t",98),
(#"v",#"v",99),
(#"w",#"w",100),
(#"{",#"{",101),
(#"|",#"|",102),
(#"}",#"}",103)], [56]), ([(#"\^@",#"\t",7),
(#"\v",#"s",7),
(#"u",#"\255",7),
(#"t",#"t",9)], [13]), ([(#"\^@",#"\t",7),
(#"\v",#"s",7),
(#"u",#"\255",7),
(#"t",#"t",9)], [12, 13]), ([(#"\^@",#"\b",7),
(#"\v",#"\f",7),
(#"\^N",#"\^_",7),
(#"!",#"Z",7),
(#"]",#"m",7),
(#"o",#"s",7),
(#"u",#"\255",7),
(#"\t",#"\t",37),
(#"\r",#"\r",37),
(#" ",#" ",37),
(#"\n",#"\n",38),
(#"[",#"[",39),
(#"\\",#"\\",40),
(#"n",#"n",41),
(#"t",#"t",42)], [13]), ([(#"\^@",#"\t",7),
(#"\v",#"g",7),
(#"i",#"s",7),
(#"u",#"\255",7),
(#"h",#"h",8),
(#"t",#"t",9)], [13]), ([(#"\^@",#"\t",7),
(#"\v",#"s",7),
(#"u",#"\255",7),
(#"t",#"t",9)], []), ([(#"\^@",#"\t",7),
(#"\v",#"h",7),
(#"j",#"s",7),
(#"u",#"\255",7),
(#"i",#"i",10),
(#"t",#"t",9)], []), ([(#"\^@",#"\t",7),
(#"\v",#"g",7),
(#"i",#"s",7),
(#"u",#"\255",7),
(#"h",#"h",8),
(#"t",#"t",9)], []), ([(#"\^@",#"\t",7),
(#"\v",#"r",7),
(#"u",#"\255",7),
(#"s",#"s",11),
(#"t",#"t",9)], []), ([(#"\^@",#"\t",7),
(#"\v",#"c",7),
(#"e",#"s",7),
(#"u",#"\255",7),
(#"d",#"d",12),
(#"t",#"t",9)], []), ([(#"\^@",#"\t",7),
(#"\v",#"n",7),
(#"p",#"s",7),
(#"u",#"\255",7),
(#"o",#"o",13),
(#"t",#"t",9)], []), ([(#"\^@",#"\t",7),
(#"\v",#"d",7),
(#"f",#"s",7),
(#"u",#"\255",7),
(#"e",#"e",14),
(#"t",#"t",9)], []), ([(#"\^@",#"\t",7),
(#"\v",#"r",7),
(#"u",#"\255",7),
(#"s",#"s",15),
(#"t",#"t",9)], []), ([(#"\^@",#"\t",7),
(#"\v",#"m",7),
(#"o",#"s",7),
(#"u",#"\255",7),
(#"n",#"n",16),
(#"t",#"t",9)], []), ([(#"\^@",#"\t",7),
(#"\v",#"n",7),
(#"p",#"s",7),
(#"u",#"\255",7),
(#"o",#"o",17),
(#"t",#"t",9)], []), ([(#"\^@",#"\t",7),
(#"\v",#"s",7),
(#"u",#"\255",7),
(#"t",#"t",18)], []), ([(#"\^@",#"\t",7),
(#"\v",#"g",7),
(#"i",#"s",7),
(#"u",#"v",7),
(#"x",#"\255",7),
(#"h",#"h",8),
(#"t",#"t",9),
(#"w",#"w",19)], []), ([(#"\^@",#"\t",7),
(#"\v",#"n",7),
(#"p",#"s",7),
(#"u",#"\255",7),
(#"o",#"o",20),
(#"t",#"t",9)], []), ([(#"\^@",#"\t",7),
(#"\v",#"q",7),
(#"s",#"s",7),
(#"u",#"\255",7),
(#"r",#"r",21),
(#"t",#"t",9)], []), ([(#"\^@",#"\t",7),
(#"\v",#"j",7),
(#"l",#"s",7),
(#"u",#"\255",7),
(#"k",#"k",22),
(#"t",#"t",9)], []), ([(#"\^@",#"\t",7),
(#"\v",#"+",7),
(#"-",#"s",7),
(#"u",#"\255",7),
(#",",#",",23),
(#"t",#"t",9)], []), ([(#"\^@",#"\t",7),
(#"\v",#"s",7),
(#"u",#"v",7),
(#"x",#"\255",7),
(#"t",#"t",9),
(#"w",#"w",24)], []), ([(#"\^@",#"\t",7),
(#"\v",#"h",7),
(#"j",#"s",7),
(#"u",#"\255",7),
(#"i",#"i",25),
(#"t",#"t",9)], []), ([(#"\^@",#"\t",7),
(#"\v",#"k",7),
(#"m",#"s",7),
(#"u",#"\255",7),
(#"l",#"l",26),
(#"t",#"t",9)], []), ([(#"\^@",#"\t",7),
(#"\v",#"k",7),
(#"m",#"s",7),
(#"u",#"\255",7),
(#"l",#"l",27),
(#"t",#"t",9)], []), ([(#"\^@",#"\t",7),
(#"\v",#"e",7),
(#"g",#"s",7),
(#"u",#"\255",7),
(#"f",#"f",28),
(#"t",#"t",9)], []), ([(#"\^@",#"\t",7),
(#"\v",#"h",7),
(#"j",#"s",7),
(#"u",#"\255",7),
(#"i",#"i",29),
(#"t",#"t",9)], []), ([(#"\^@",#"\t",7),
(#"\v",#"s",7),
(#"u",#"w",7),
(#"y",#"\255",7),
(#"t",#"t",9),
(#"x",#"x",30)], []), ([(#"\^@",#"\t",7),
(#"\v",#"k",7),
(#"m",#"s",7),
(#"u",#"\255",7),
(#"l",#"l",31),
(#"t",#"t",9)], []), ([(#"\^@",#"\t",7),
(#"\v",#"`",7),
(#"b",#"s",7),
(#"u",#"\255",7),
(#"a",#"a",32),
(#"t",#"t",9)], []), ([(#"\^@",#"\t",7),
(#"\v",#"s",7),
(#"u",#"\255",7),
(#"t",#"t",33)], []), ([(#"\^@",#"\t",7),
(#"\v",#"d",7),
(#"f",#"g",7),
(#"i",#"s",7),
(#"u",#"\255",7),
(#"e",#"e",34),
(#"h",#"h",8),
(#"t",#"t",9)], []), ([(#"\^@",#"\t",7),
(#"\v",#"[",7),
(#"]",#"q",7),
(#"s",#"s",7),
(#"u",#"\255",7),
(#"\\",#"\\",35),
(#"r",#"r",34),
(#"t",#"t",9)], []), ([(#"\^@",#"\t",7),
(#"\v",#"!",7),
(#"#",#"s",7),
(#"u",#"\255",7),
(#"\"",#"\"",36),
(#"t",#"t",9)], []), ([(#"\^@",#"\t",7),
(#"\v",#"s",7),
(#"u",#"\255",7),
(#"t",#"t",9)], [9]), ([(#"\^@",#"\b",7),
(#"\v",#"\f",7),
(#"\^N",#"\^_",7),
(#"!",#"[",7),
(#"]",#"s",7),
(#"u",#"\255",7),
(#"\t",#"\t",37),
(#"\r",#"\r",37),
(#" ",#" ",37),
(#"\n",#"\n",38),
(#"\\",#"\\",58),
(#"t",#"t",9)], []), ([(#"\t",#"\n",38),
(#"\r",#"\r",38),
(#" ",#" ",38),
(#"\\",#"\\",57)], []), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#"1",#"s",7),
(#"u",#"\255",7),
(#"0",#"0",43),
(#"t",#"t",9)], []), ([(#"\^@",#"\t",7),
(#"\v",#"s",7),
(#"u",#"\255",7),
(#"t",#"t",9)], [10]), ([(#"\^@",#"\t",7),
(#"\v",#"s",7),
(#"u",#"\255",7),
(#"t",#"t",9)], [6]), ([(#"\^@",#"\t",7),
(#"\v",#"g",7),
(#"i",#"s",7),
(#"u",#"\255",7),
(#"h",#"h",8),
(#"t",#"t",9)], [7]), ([(#"\^@",#"\t",7),
(#"\v",#",",7),
(#".",#"s",7),
(#"u",#"\255",7),
(#"-",#"-",44),
(#"t",#"t",9)], []), ([(#"\^@",#"\t",7),
(#"\v",#"8",7),
(#":",#"s",7),
(#"u",#"\255",7),
(#"9",#"9",45),
(#"t",#"t",9)], []), ([(#"\^@",#"\t",7),
(#"\v",#"\\",7),
(#"^",#"s",7),
(#"u",#"\255",7),
(#"]",#"]",46),
(#"t",#"t",9)], []), ([(#"\^@",#"\t",7),
(#"\v",#"Z",7),
(#"\\",#"s",7),
(#"u",#"\255",7),
(#"[",#"[",47),
(#"t",#"t",9)], []), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#"1",#"s",7),
(#"u",#"\255",7),
(#"0",#"0",48),
(#"t",#"t",9)], []), ([(#"\^@",#"\t",7),
(#"\v",#",",7),
(#".",#"s",7),
(#"u",#"\255",7),
(#"-",#"-",49),
(#"t",#"t",9)], []), ([(#"\^@",#"\t",7),
(#"\v",#"8",7),
(#":",#"s",7),
(#"u",#"\255",7),
(#"9",#"9",50),
(#"t",#"t",9)], []), ([(#"\^@",#"\t",7),
(#"\v",#"\\",7),
(#"^",#"s",7),
(#"u",#"\255",7),
(#"]",#"]",51),
(#"t",#"t",9)], []), ([(#"\^@",#"\t",7),
(#"\v",#"Z",7),
(#"\\",#"s",7),
(#"u",#"\255",7),
(#"[",#"[",52),
(#"t",#"t",9)], []), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#"1",#"s",7),
(#"u",#"\255",7),
(#"0",#"0",53),
(#"t",#"t",9)], []), ([(#"\^@",#"\t",7),
(#"\v",#",",7),
(#".",#"s",7),
(#"u",#"\255",7),
(#"-",#"-",54),
(#"t",#"t",9)], []), ([(#"\^@",#"\t",7),
(#"\v",#"8",7),
(#":",#"s",7),
(#"u",#"\255",7),
(#"9",#"9",55),
(#"t",#"t",9)], []), ([(#"\^@",#"\t",7),
(#"\v",#"\\",7),
(#"^",#"s",7),
(#"u",#"\255",7),
(#"]",#"]",56),
(#"t",#"t",9)], []), ([(#"\^@",#"\t",7),
(#"\v",#"s",7),
(#"u",#"\255",7),
(#"t",#"t",9)], [8]), ([], [11]), ([(#"\^@",#"\t",7),
(#"\v",#"s",7),
(#"u",#"\255",7),
(#"t",#"t",9)], [11]), ([(#"\^@",#"\t",7),
(#"\v",#"s",7),
(#"u",#"\255",7),
(#"t",#"t",9)], [5]), ([(#"\r",#"\r",66)], [3]), ([(#"\^@",#"\t",7),
(#"\v",#".",7),
(#"0",#"s",7),
(#"u",#"\255",7),
(#"/",#"/",65),
(#"t",#"t",9)], [5]), ([(#"\^@",#"\t",7),
(#"\v",#")",7),
(#"+",#"s",7),
(#"u",#"\255",7),
(#"*",#"*",64),
(#"t",#"t",9)], [5]), ([(#"\^@",#"\t",7),
(#"\v",#"g",7),
(#"i",#"s",7),
(#"u",#"\255",7),
(#"h",#"h",8),
(#"t",#"t",9)], [5]), ([(#"\^@",#"\t",7),
(#"\v",#"s",7),
(#"u",#"\255",7),
(#"t",#"t",9)], [2]), ([(#"\^@",#"\t",7),
(#"\v",#"s",7),
(#"u",#"\255",7),
(#"t",#"t",9)], [4]), ([], [3]), ([(#"\^@",#"\t",7),
(#"\v",#"s",7),
(#"u",#"\255",7),
(#"t",#"t",9)], [58]), ([(#"\^@",#"\b",7),
(#"\v",#"\f",7),
(#"\^N",#"\^_",7),
(#"!",#"s",7),
(#"u",#"\255",7),
(#"\t",#"\t",170),
(#"\r",#"\r",170),
(#" ",#" ",170),
(#"t",#"t",9)], [56, 58]), ([(#"\r",#"\r",169)], [55]), ([(#"\^@",#"\t",7),
(#"\v",#"s",7),
(#"u",#"\255",7),
(#"t",#"t",9)], [0, 58]), ([(#"\^@",#"\t",7),
(#"\v",#"s",7),
(#"u",#"\255",7),
(#"t",#"t",9)], [35, 58]), ([(#"\^@",#"\t",7),
(#"\v",#"s",7),
(#"u",#"\255",7),
(#"t",#"t",9)], [51, 58]), ([(#"\^@",#"\t",7),
(#"\v",#"s",7),
(#"u",#"\255",7),
(#"t",#"t",9)], [52, 58]), ([(#"\^@",#"\t",7),
(#"\v",#"s",7),
(#"u",#"\255",7),
(#"t",#"t",9)], [43, 58]), ([(#"\^@",#"\t",7),
(#"\v",#"s",7),
(#"u",#"\255",7),
(#"t",#"t",9)], [45, 58]), ([(#"\^@",#"\t",7),
(#"\v",#"s",7),
(#"u",#"\255",7),
(#"t",#"t",9)], [57, 58]), ([(#"\^@",#"\t",7),
(#"\v",#"s",7),
(#"u",#"\255",7),
(#"t",#"t",9)], [44, 58]), ([(#"\^@",#"\t",7),
(#"\v",#"s",7),
(#"u",#"\255",7),
(#"t",#"t",9)], [46, 58]), ([(#"\^@",#"\t",7),
(#"\v",#")",7),
(#"+",#"s",7),
(#"u",#"\255",7),
(#"*",#"*",168),
(#"t",#"t",9)], [42, 58]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"s",7),
(#"u",#"\255",7),
(#"0",#"9",167),
(#"t",#"t",9)], [32, 58]), ([(#"\^@",#"\t",7),
(#"\v",#"<",7),
(#">",#"s",7),
(#"u",#"\255",7),
(#"=",#"=",166),
(#"t",#"t",9)], [54, 58]), ([(#"\^@",#"\t",7),
(#"\v",#"s",7),
(#"u",#"\255",7),
(#"t",#"t",9)], [53, 58]), ([(#"\^@",#"\t",7),
(#"\v",#"<",7),
(#"?",#"s",7),
(#"u",#"\255",7),
(#"=",#"=",164),
(#">",#">",165),
(#"t",#"t",9)], [39, 58]), ([(#"\^@",#"\t",7),
(#"\v",#"s",7),
(#"u",#"\255",7),
(#"t",#"t",9)], [41, 58]), ([(#"\^@",#"\t",7),
(#"\v",#"<",7),
(#">",#"s",7),
(#"u",#"\255",7),
(#"=",#"=",163),
(#"t",#"t",9)], [37, 58]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"s",104),
(#"u",#"z",104),
(#"t",#"t",106)], [31, 58]), ([(#"\^@",#"\t",7),
(#"\v",#"s",7),
(#"u",#"\255",7),
(#"t",#"t",9)], [49, 58]), ([(#"\^@",#"\t",7),
(#"\v",#"s",7),
(#"u",#"\255",7),
(#"t",#"t",9)], [50, 58]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"q",104),
(#"s",#"s",104),
(#"u",#"z",104),
(#"r",#"r",159),
(#"t",#"t",106)], [31, 58]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"q",104),
(#"s",#"s",104),
(#"u",#"z",104),
(#"r",#"r",155),
(#"t",#"t",106)], [31, 58]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"n",104),
(#"p",#"s",104),
(#"u",#"z",104),
(#"o",#"o",154),
(#"t",#"t",106)], [31, 58]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"k",104),
(#"m",#"m",104),
(#"o",#"s",104),
(#"u",#"z",104),
(#"l",#"l",149),
(#"n",#"n",150),
(#"t",#"t",106)], [31, 58]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"n",104),
(#"p",#"s",104),
(#"v",#"z",104),
(#"o",#"o",140),
(#"t",#"t",106),
(#"u",#"u",141)], [31, 58]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"e",104),
(#"g",#"m",104),
(#"o",#"s",104),
(#"u",#"z",104),
(#"f",#"f",138),
(#"n",#"n",139),
(#"t",#"t",106)], [31, 58]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"d",104),
(#"f",#"s",104),
(#"u",#"z",104),
(#"e",#"e",136),
(#"t",#"t",106)], [31, 58]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"h",104),
(#"j",#"s",104),
(#"u",#"z",104),
(#"i",#"i",134),
(#"t",#"t",106)], [31, 58]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"e",104),
(#"g",#"s",104),
(#"u",#"z",104),
(#"f",#"f",133),
(#"t",#"t",106)], [31, 58]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"g",104),
(#"i",#"n",104),
(#"p",#"s",104),
(#"u",#"x",104),
(#"z",#"z",104),
(#"h",#"h",126),
(#"o",#"o",127),
(#"t",#"t",106),
(#"y",#"y",128)], [31, 58]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"b",#"s",104),
(#"u",#"z",104),
(#"a",#"a",124),
(#"t",#"t",106)], [31, 58]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"g",104),
(#"i",#"s",104),
(#"u",#"z",104),
(#"h",#"h",105),
(#"t",#"t",106)], [31, 58]), ([(#"\^@",#"\t",7),
(#"\v",#"s",7),
(#"u",#"\255",7),
(#"t",#"t",9)], [47, 58]), ([(#"\^@",#"\t",7),
(#"\v",#"s",7),
(#"u",#"\255",7),
(#"t",#"t",9)], [34, 58]), ([(#"\^@",#"\t",7),
(#"\v",#"s",7),
(#"u",#"\255",7),
(#"t",#"t",9)], [48, 58]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"s",104),
(#"u",#"z",104),
(#"t",#"t",106)], [31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"h",104),
(#"j",#"s",104),
(#"u",#"z",104),
(#"i",#"i",121),
(#"t",#"t",106)], [31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"g",104),
(#"i",#"s",104),
(#"u",#"z",104),
(#"h",#"h",107),
(#"t",#"t",106)], [31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"h",104),
(#"j",#"s",104),
(#"u",#"z",104),
(#"i",#"i",108),
(#"t",#"t",106)], [31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"r",104),
(#"u",#"z",104),
(#"s",#"s",109),
(#"t",#"t",106)], [31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"c",104),
(#"e",#"s",104),
(#"u",#"z",104),
(#"d",#"d",110),
(#"t",#"t",106)], [31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"n",104),
(#"p",#"s",104),
(#"u",#"z",104),
(#"o",#"o",111),
(#"t",#"t",106)], [31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"d",104),
(#"f",#"s",104),
(#"u",#"z",104),
(#"e",#"e",112),
(#"t",#"t",106)], [31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"r",104),
(#"u",#"z",104),
(#"s",#"s",113),
(#"t",#"t",106)], [31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"m",104),
(#"o",#"s",104),
(#"u",#"z",104),
(#"n",#"n",114),
(#"t",#"t",106)], [31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"n",104),
(#"p",#"s",104),
(#"u",#"z",104),
(#"o",#"o",115),
(#"t",#"t",106)], [31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"s",104),
(#"u",#"z",104),
(#"t",#"t",116)], [31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"g",104),
(#"i",#"s",104),
(#"u",#"v",104),
(#"x",#"z",104),
(#"h",#"h",107),
(#"t",#"t",106),
(#"w",#"w",117)], [31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"n",104),
(#"p",#"s",104),
(#"u",#"z",104),
(#"o",#"o",118),
(#"t",#"t",106)], [31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"q",104),
(#"s",#"s",104),
(#"u",#"z",104),
(#"r",#"r",119),
(#"t",#"t",106)], [31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"j",104),
(#"l",#"s",104),
(#"u",#"z",104),
(#"k",#"k",120),
(#"t",#"t",106)], [31]), ([(#"\^@",#"\t",7),
(#"\v",#"+",7),
(#"-",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#",",#",",23),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"s",104),
(#"u",#"z",104),
(#"t",#"t",106)], [31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"k",104),
(#"m",#"s",104),
(#"u",#"z",104),
(#"l",#"l",122),
(#"t",#"t",106)], [31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"d",104),
(#"f",#"s",104),
(#"u",#"z",104),
(#"e",#"e",123),
(#"t",#"t",106)], [31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"s",104),
(#"u",#"z",104),
(#"t",#"t",106)], [14, 31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"q",104),
(#"s",#"s",104),
(#"u",#"z",104),
(#"r",#"r",125),
(#"t",#"t",106)], [31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"s",104),
(#"u",#"z",104),
(#"t",#"t",106)], [22, 31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"d",104),
(#"f",#"h",104),
(#"j",#"s",104),
(#"u",#"z",104),
(#"e",#"e",131),
(#"i",#"i",108),
(#"t",#"t",106)], [31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"s",104),
(#"u",#"z",104),
(#"t",#"t",106)], [16, 31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"o",104),
(#"q",#"s",104),
(#"u",#"z",104),
(#"p",#"p",129),
(#"t",#"t",106)], [31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"d",104),
(#"f",#"s",104),
(#"u",#"z",104),
(#"e",#"e",130),
(#"t",#"t",106)], [31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"s",104),
(#"u",#"z",104),
(#"t",#"t",106)], [23, 31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"m",104),
(#"o",#"s",104),
(#"u",#"z",104),
(#"n",#"n",132),
(#"t",#"t",106)], [31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"s",104),
(#"u",#"z",104),
(#"t",#"t",106)], [26, 31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"s",104),
(#"u",#"z",104),
(#"t",#"t",106)], [29, 31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"k",104),
(#"m",#"s",104),
(#"u",#"z",104),
(#"l",#"l",135),
(#"t",#"t",106)], [31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"s",104),
(#"u",#"z",104),
(#"t",#"t",106)], [30, 31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"s",104),
(#"u",#"z",104),
(#"t",#"t",137)], [31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"g",104),
(#"i",#"s",104),
(#"u",#"z",104),
(#"h",#"h",107),
(#"t",#"t",106)], [18, 31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"s",104),
(#"u",#"z",104),
(#"t",#"t",106)], [25, 31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"s",104),
(#"u",#"z",104),
(#"t",#"t",106)], [19, 31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"q",104),
(#"s",#"s",104),
(#"u",#"z",104),
(#"r",#"r",148),
(#"t",#"t",106)], [31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"m",104),
(#"o",#"s",104),
(#"u",#"z",104),
(#"n",#"n",142),
(#"t",#"t",106)], [31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"b",104),
(#"d",#"s",104),
(#"u",#"z",104),
(#"c",#"c",143),
(#"t",#"t",106)], [31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"s",104),
(#"u",#"z",104),
(#"t",#"t",144)], [31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"g",104),
(#"j",#"s",104),
(#"u",#"z",104),
(#"h",#"h",107),
(#"i",#"i",145),
(#"t",#"t",106)], [31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"n",104),
(#"p",#"s",104),
(#"u",#"z",104),
(#"o",#"o",146),
(#"t",#"t",106)], [31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"m",104),
(#"o",#"s",104),
(#"u",#"z",104),
(#"n",#"n",147),
(#"t",#"t",106)], [31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"s",104),
(#"u",#"z",104),
(#"t",#"t",106)], [21, 31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"s",104),
(#"u",#"z",104),
(#"t",#"t",106)], [15, 31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"r",104),
(#"u",#"z",104),
(#"s",#"s",152),
(#"t",#"t",106)], [31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"c",104),
(#"e",#"s",104),
(#"u",#"z",104),
(#"d",#"d",151),
(#"t",#"t",106)], [31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"s",104),
(#"u",#"z",104),
(#"t",#"t",106)], [20, 31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"d",104),
(#"f",#"s",104),
(#"u",#"z",104),
(#"e",#"e",153),
(#"t",#"t",106)], [31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"s",104),
(#"u",#"z",104),
(#"t",#"t",106)], [27, 31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"s",104),
(#"u",#"z",104),
(#"t",#"t",106)], [28, 31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"d",104),
(#"f",#"s",104),
(#"u",#"z",104),
(#"e",#"e",156),
(#"t",#"t",106)], [31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"b",#"s",104),
(#"u",#"z",104),
(#"a",#"a",157),
(#"t",#"t",106)], [31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"j",104),
(#"l",#"s",104),
(#"u",#"z",104),
(#"k",#"k",158),
(#"t",#"t",106)], [31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"s",104),
(#"u",#"z",104),
(#"t",#"t",106)], [17, 31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"q",104),
(#"s",#"s",104),
(#"u",#"z",104),
(#"r",#"r",160),
(#"t",#"t",106)], [31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"b",#"s",104),
(#"u",#"z",104),
(#"a",#"a",161),
(#"t",#"t",106)], [31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"s",104),
(#"u",#"x",104),
(#"z",#"z",104),
(#"t",#"t",106),
(#"y",#"y",162)], [31]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"@",7),
(#"[",#"^",7),
(#"`",#"`",7),
(#"{",#"\255",7),
(#"0",#"9",104),
(#"A",#"Z",104),
(#"_",#"_",104),
(#"a",#"s",104),
(#"u",#"z",104),
(#"t",#"t",106)], [24, 31]), ([(#"\^@",#"\t",7),
(#"\v",#"s",7),
(#"u",#"\255",7),
(#"t",#"t",9)], [36]), ([(#"\^@",#"\t",7),
(#"\v",#"s",7),
(#"u",#"\255",7),
(#"t",#"t",9)], [38]), ([(#"\^@",#"\t",7),
(#"\v",#"s",7),
(#"u",#"\255",7),
(#"t",#"t",9)], [40]), ([(#"\^@",#"\t",7),
(#"\v",#"s",7),
(#"u",#"\255",7),
(#"t",#"t",9)], [33]), ([(#"\^@",#"\t",7),
(#"\v",#"/",7),
(#":",#"s",7),
(#"u",#"\255",7),
(#"0",#"9",167),
(#"t",#"t",9)], [32]), ([(#"\^@",#"\t",7),
(#"\v",#"s",7),
(#"u",#"\255",7),
(#"t",#"t",9)], [1]), ([], [55]), ([(#"\^@",#"\b",7),
(#"\v",#"\f",7),
(#"\^N",#"\^_",7),
(#"!",#"s",7),
(#"u",#"\255",7),
(#"\t",#"\t",170),
(#"\r",#"\r",170),
(#" ",#" ",170),
(#"t",#"t",9)], [56])]
    fun mk yyins = let
        (* current start state *)
        val yyss = ref INITIAL
	fun YYBEGIN ss = (yyss := ss)
	(* current input stream *)
        val yystrm = ref yyins
	(* get one char of input *)
	val yygetc = yyInput.getc
	(* create yytext *)
	fun yymktext(strm) = yyInput.subtract (strm, !yystrm)
        open UserDeclarations
        fun lex 
(yyarg as ()) = let 
     fun continue() = let
            val yylastwasn = yyInput.lastWasNL (!yystrm)
            fun yystuck (yyNO_MATCH) = raise Fail "stuck state"
	      | yystuck (yyMATCH (strm, action, old)) = 
		  action (strm, old)
	    val yypos = yyInput.getpos (!yystrm)
	    val yygetlineNo = yyInput.getlineNo
	    fun yyactsToMatches (strm, [],	  oldMatches) = oldMatches
	      | yyactsToMatches (strm, act::acts, oldMatches) = 
		  yyMATCH (strm, act, yyactsToMatches (strm, acts, oldMatches))
	    fun yygo actTable = 
		(fn (~1, _, oldMatches) => yystuck oldMatches
		  | (curState, strm, oldMatches) => let
		      val (transitions, finals') = Vector.sub (yytable, curState)
		      val finals = List.map (fn i => Vector.sub (actTable, i)) finals'
		      fun tryfinal() = 
		            yystuck (yyactsToMatches (strm, finals, oldMatches))
		      fun find (c, []) = NONE
			| find (c, (c1, c2, s)::ts) = 
		            if c1 <= c andalso c <= c2 then SOME s
			    else find (c, ts)
		      in case yygetc strm
			  of SOME(c, strm') => 
			       (case find (c, transitions)
				 of NONE => tryfinal()
				  | SOME n => 
				      yygo actTable
					(n, strm', 
					 yyactsToMatches (strm, finals, oldMatches)))
			   | NONE => tryfinal()
		      end)
	    in 
let
fun yyAction0 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN STRING; str := ""; inStr := 1; strStart := yypos; continue()))
fun yyAction1 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN COMMENT; nestingDepth := !nestingDepth + 1; continue()))
fun yyAction2 (strm, lastMatch : yymatch) = (yystrm := strm;
      (nestingDepth := !nestingDepth + 1; continue()))
fun yyAction3 (strm, lastMatch : yymatch) = (yystrm := strm;
      (lineNum := !lineNum+1; linePos := yypos :: !linePos; continue()))
fun yyAction4 (strm, lastMatch : yymatch) = (yystrm := strm;
      (nestingDepth := !nestingDepth - 1; if !nestingDepth = 0 then YYBEGIN INITIAL else (); continue()))
fun yyAction5 (strm, lastMatch : yymatch) = (yystrm := strm; (continue()))
fun yyAction6 (strm, lastMatch : yymatch) = (yystrm := strm;
      (str := !str ^ "\n"; lineNum := !lineNum+1; linePos := yypos :: !linePos; continue()))
fun yyAction7 (strm, lastMatch : yymatch) = (yystrm := strm;
      (str := !str ^ "\t"; continue()))
fun yyAction8 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        ((case asciiToString(valOf (Int.fromString(yytext))) of NONE => ErrorMsg.error yypos ("illegal ascii in string")
			  | SOME  x => str := !str ^ x); continue())
      end
fun yyAction9 (strm, lastMatch : yymatch) = (yystrm := strm;
      (str := !str ^ "\""; continue()))
fun yyAction10 (strm, lastMatch : yymatch) = (yystrm := strm;
      (str := !str ^ "\\"; continue()))
fun yyAction11 (strm, lastMatch : yymatch) = (yystrm := strm; (continue()))
fun yyAction12 (strm, lastMatch : yymatch) = (yystrm := strm;
      (YYBEGIN INITIAL; inStr := 0; Tokens.STRING(!str, !strStart, yypos+1)))
fun yyAction13 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (str := !str ^ yytext; continue())
      end
fun yyAction14 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.WHILE(yypos,yypos+5)))
fun yyAction15 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.FOR(yypos,yypos+3)))
fun yyAction16 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.TO(yypos,yypos+2)))
fun yyAction17 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.BREAK(yypos,yypos+5)))
fun yyAction18 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.LET(yypos,yypos+3)))
fun yyAction19 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.IN(yypos,yypos+2)))
fun yyAction20 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.END(yypos,yypos+3)))
fun yyAction21 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.FUNCTION(yypos,yypos+8)))
fun yyAction22 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.VAR(yypos,yypos+3)))
fun yyAction23 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.TYPE(yypos,yypos+4)))
fun yyAction24 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.ARRAY(yypos,yypos+5)))
fun yyAction25 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.IF(yypos,yypos+2)))
fun yyAction26 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.THEN(yypos,yypos+4)))
fun yyAction27 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.ELSE(yypos,yypos+4)))
fun yyAction28 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.DO(yypos,yypos+2)))
fun yyAction29 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.OF(yypos,yypos+2)))
fun yyAction30 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.NIL(yypos,yypos+3)))
fun yyAction31 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm; (Tokens.ID(yytext, yypos, yypos+size(yytext)))
      end
fun yyAction32 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (Tokens.INT(valOf (Int.fromString yytext), yypos, yypos+size(yytext)))
      end
fun yyAction33 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.ASSIGN(yypos, yypos+2)))
fun yyAction34 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.OR(yypos, yypos+1)))
fun yyAction35 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.AND(yypos, yypos+1)))
fun yyAction36 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.GE(yypos, yypos+2)))
fun yyAction37 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.GT(yypos, yypos+1)))
fun yyAction38 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.LE(yypos, yypos+2)))
fun yyAction39 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.LT(yypos, yypos+1)))
fun yyAction40 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.NEQ(yypos, yypos+2)))
fun yyAction41 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.EQ(yypos, yypos+1)))
fun yyAction42 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.DIVIDE(yypos, yypos+1)))
fun yyAction43 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.TIMES(yypos, yypos+1)))
fun yyAction44 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.MINUS(yypos, yypos+1)))
fun yyAction45 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.PLUS(yypos, yypos+1)))
fun yyAction46 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.DOT(yypos, yypos+1)))
fun yyAction47 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.LBRACE(yypos, yypos+1)))
fun yyAction48 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.RBRACE(yypos, yypos+1)))
fun yyAction49 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.LBRACK(yypos, yypos+1)))
fun yyAction50 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.RBRACK(yypos, yypos+1)))
fun yyAction51 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.LPAREN(yypos, yypos+1)))
fun yyAction52 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.RPAREN(yypos, yypos+1)))
fun yyAction53 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.SEMICOLON(yypos, yypos+1)))
fun yyAction54 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.COLON(yypos, yypos+1)))
fun yyAction55 (strm, lastMatch : yymatch) = (yystrm := strm;
      (lineNum := !lineNum+1; linePos := yypos :: !linePos; continue()))
fun yyAction56 (strm, lastMatch : yymatch) = (yystrm := strm; (continue()))
fun yyAction57 (strm, lastMatch : yymatch) = (yystrm := strm;
      (Tokens.COMMA(yypos,yypos+1)))
fun yyAction58 (strm, lastMatch : yymatch) = let
      val yytext = yymktext(strm)
      in
        yystrm := strm;
        (ErrorMsg.error yypos ("illegal character " ^ yytext); continue())
      end
val yyactTable = Vector.fromList([yyAction0, yyAction1, yyAction2, yyAction3,
  yyAction4, yyAction5, yyAction6, yyAction7, yyAction8, yyAction9, yyAction10,
  yyAction11, yyAction12, yyAction13, yyAction14, yyAction15, yyAction16,
  yyAction17, yyAction18, yyAction19, yyAction20, yyAction21, yyAction22,
  yyAction23, yyAction24, yyAction25, yyAction26, yyAction27, yyAction28,
  yyAction29, yyAction30, yyAction31, yyAction32, yyAction33, yyAction34,
  yyAction35, yyAction36, yyAction37, yyAction38, yyAction39, yyAction40,
  yyAction41, yyAction42, yyAction43, yyAction44, yyAction45, yyAction46,
  yyAction47, yyAction48, yyAction49, yyAction50, yyAction51, yyAction52,
  yyAction53, yyAction54, yyAction55, yyAction56, yyAction57, yyAction58])
in
  if yyInput.eof(!(yystrm))
    then UserDeclarations.eof(yyarg)
    else (case (!(yyss))
       of STRING => yygo yyactTable (0, !(yystrm), yyNO_MATCH)
        | COMMENT => yygo yyactTable (1, !(yystrm), yyNO_MATCH)
        | INITIAL => yygo yyactTable (2, !(yystrm), yyNO_MATCH)
      (* end case *))
end
            end
	  in 
            continue() 	  
	    handle IO.Io{cause, ...} => raise cause
          end
        in 
          lex 
        end
    in
    fun makeLexer yyinputN = mk (yyInput.mkStream yyinputN)
    fun makeLexer' ins = mk (yyInput.mkStream ins)
    end

  end
